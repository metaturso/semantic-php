%package grammar
%provide grammar

%languagemode php-mode

%type  <number>
%token <number> T_NUMBER

;; the original regexp analyzer used in EDEP caused infinite loops for
;; all method names beginning with two underscores, e.e. __construct.
%type  <string> syntax "\\([A-z_]+[A-z0-9_]*\\)" ;; should be regex, but sexp works okay.
%token <string> T_STRING

%type  <quoted-string> syntax "\\s\"" matchdatatype sexp
%token <quoted-string> T_CONSTANT_ENCAPSED_STRING

%type  <encapsed-and-whitespace>
%token <encapsed-and-whitespace> T_ENCAPSED_AND_WHITESPACE

%type  <variable> syntax "[$]\\([a-zA-Z_]+[a-zA-Z0-9_]*\\)"
%token <variable> T_VARIABLE

%type  <mb> syntax "[[:nonascii:]]+"
%token <mb> mbstring

%token <open-paren>  LPAREN "("
%token <close-paren> RPAREN ")"
%token <open-paren>  LBRACE "{"
%token <close-paren> RBRACE "}"
%token <open-paren>  LBRACK "["
%token <close-paren> RBRACK "]"

%type <block>
%token <block> PAREN_BLOCK "(LPAREN RPAREN)"
%token <block> BRACE_BLOCK "(LBRACE RBRACE)"
%token <block> BRACK_BLOCK "(LBRACK RBRACK)"

%type <code>
%token <code> T_OPEN_TAG "\\<[?]\\(php\\)?"
%token <code> T_CLOSE_TAG "[?]\\>"

;; A support token representing the lexical scope beneath (or inside)
;; a namespace declaration.
%token <scope> S_NS_SCOPE

%type  <punctuation> syntax "\\(\\s.\\|\\s$\\|\\s'\\|[$]\\|[\\]\\)+" matchdatatype string
%token <punctuation> T_COLON        ":"
%token <punctuation> T_SEMICOLON    ";"
%token <punctuation> T_EQUAL        "="
%token <punctuation> T_COMMA        ","
%token <punctuation> T_SCOPE_RES    "::"
%token <punctuation> T_NS_SEPARATOR "\\"

%type <keyword>
%keyword T_AS            "as"
%keyword T_USE           "use"
%keyword T_CONST         "const"
%keyword T_NULL          "null"
%keyword T_TRUE          "true"
%keyword T_FALSE         "false"
%keyword T_NEW           "new"
%keyword T_NAMESPACE     "namespace"
%keyword T_CLASS         "class"
%keyword T_INTERFACE     "interface"
%keyword T_ABSTRACT      "abstract"
%keyword T_FINAL         "final"
%keyword T_EXTENDS       "extends"
%keyword T_IMPLEMENTS    "implements"
%keyword T_PUBLIC        "public"
%keyword T_PRIVATE       "private"
%keyword T_PROTECTED     "protected"
%keyword T_STATIC        "static"
%keyword T_FUNCTION      "function"
%keyword T_ARRAY         "array"
%keyword T_VAR           "var"
%keyword T_TYPE_ARRAY    "array"
%keyword T_TYPE_INT      "int"
%keyword T_TYPE_BOOL     "bool"
%keyword T_TYPE_FLOAT    "float"
%keyword T_TYPE_STRING   "string"
%keyword T_TYPE_CALLABLE "callable"
%keyword T_TYPE_SELF     "self"
%keyword T_TYPE_PARENT   "parent"

;; Internally the first start nonterminal is targeted by the reserved
;; symbol bovine-toplevel, so it can be found by the parser harness.
%start grammar

;; nonterminals used with EXPANDFULL
%start formal_parameters
%start namespace_subparts
%start class_member_declaration
%start interface_member_declaration

;; reparse nonterminals

;; local_variables is used instead of bovine-inner-scope to extract
;; tags from blocks of code.
;;
;; NOTE AFAIK it's still impossible to use %scopestart in a Wisent
;; grammar to specify which nonterminal should be handled as
;; bovine-inner-scope.
;;
;; This nonterminal is used to parse blocks of code in
;; semantic-get-local-variables.
%start local_variables
%scopestart local_variables

%%

;; bovine-top-level
;; NOTE: Remember to keep namespace_subparts
grammar:
    namespace_declaration
  | use_declaration
  | class_declaration
  | function_declaration
  | interface_declaration
  ;

;; bovine-inner-scope
local_variables:
    T_VARIABLE local_variable_initialiser
    (VARIABLE-TAG $1 (TAG (car $2) 'metatype) (cdr $2))
  ;

local_variable_initialiser:
    T_EQUAL T_NULL
    (cons "null" "null")
  | T_EQUAL boolean
    (cons "boolean" $2)
  | T_EQUAL BRACK_BLOCK
    (cons "array" $2)
  | T_EQUAL class_instantiation
    (cons $2 $2)
  | T_EQUAL T_CONSTANT_ENCAPSED_STRING
    (cons "string" (substring $2 1 -1))
  | T_EQUAL T_NUMBER
    (cons "number" $2)
  ;

namespace_declaration:
    T_NAMESPACE qualified_name namespace_body
 ;; NOTE I'm not using the tags' `parent' attribute to avoid having to
 ;; mess about with method definitions. Plus, I set this attribute to
 ;; the namespace type tag ecb-sync-tags breaks, probably because of
 ;; circular references in the data.
 ;;
 ;; TODO Exclude variables without the :constant-flag.
 ;; TODO Macro this.
    (let ((namespace (TYPE-TAG $2 "namespace" nil nil)) members)
      ;; Create the `namespace' 'type tag and set it across
      ;; all the top level tags
      (dolist (tag $3 members)
        ;; We don't do anything on includes and using tags because we
        ;; don't want to qualify their name! Namespaces are also
        ;; ignored, but because they shouldn't appear nested in the
        ;; first place.
        ;;
        ;; On all other tags we set the `namespace' attribute and
        ;; qualify their name.
        ;; (message "Is current tag of class '(include using namespace alias)? [%s, %s]"
        ;;          (semantic-tag-class tag)
        ;;          (if (memq (semantic-tag-class tag) '(include using namespace alias)) "yes" "no"))

        (unless (memq (semantic-tag-class tag) '(include using namespace alias))
          ;; the name should be aliased iff:
          ;; 1. we're not in the global namespace (which considering this code
          ;; is inlined in the namespace rule we are not in)
          ;;
          ;; 2. the name is not fully qualified
          ;;
          ;; (semantic-tag-put-attribute tag :alias (ALIAS-TAG (car tag)
          ;;            'type
          ;;            (semantic-php--resolve-symbol-for-tag (car tag) $2)))

          (semantic-tag-put-attribute tag :namespace $2))
        (setq members (cons tag members)))
      (semantic-tag-put-attribute namespace :members (nreverse members))
      namespace)
  ;

namespace_body:
    S_NS_SCOPE
 ;; EXPANDFULL sets depth=1 by default, causing nested calls to no
 ;; longer expand blocks, this action obviates the problem by calling
 ;; semantic-parse-region with depth=nil when expanding the lexical
 ;; token S_NS_SCOPE.
 ;;
 ;; TODO Macro.
    (if $region1
        (semantic-parse-region
         (car $region1) (cdr $region1) 'namespace_subparts nil)
      (error "Invalid form (EXPANDFULL %s %s)" $region1 'namespace_subparts))

 ;; When a namespace is declared with a brace block we can use EXPANDFULL.
 ;;
 ;; NOTE The fact the EXPANDFULL macro isn't working on S_NS_SCOPE tokens
 ;; could indicate that I didn't setup the lexical token properly as a block
 ;; element.
  | BRACE_BLOCK
    (EXPANDFULL $1 namespace_subparts)
  ;

namespace_subparts:
 ;; EMPTY
    ()
  | T_SEMICOLON
    ()
  | use_declaration
  | const_declaration
  | class_declaration
  | function_declaration
  | interface_declaration
  ;

;; In PHP we want the use declarations to behave both as the definition
;; of a new symbol and as an include statement.
;;
;; NOTE use_type indicates the type of symbol being imported, this can
;; be: constant, function, class, interface, trait, and namespace.
;; For all intents and purposes class, interface and trait are handled
;; uniformly. Unfortunately class and namespace imports cannot be
;; discerned from one another at parse time, and the best place for
;; doing this is in `< REMEMBER : insert function here>'
use_declaration:
    T_USE use_type qualified_name T_AS T_STRING T_SEMICOLON
    (TAG $5 'using
         :type (TYPE-TAG $3 $2 nil nil :kind 'alias :prototype t))
    ;; (TAG $5 'using
    ;;      :type (TYPE-TAG $3 $2 (list (TYPE-TAG $3 $2 nil nil)) nil :kind 'alias :prototype t))
  | T_USE use_type qualified_name T_SEMICOLON
    (TAG (semantic-php-name-nonnamespace $3) 'using
         :type (TYPE-TAG $3 $2 nil nil :kind 'alias :prototype t))
    ;; (TAG (semantic-php-name-nonnamespace $3) 'using
    ;;      :type (TYPE-TAG $3 $2 (list (TYPE-TAG $3 $2 nil nil)) nil :kind 'alias :prototype t))
  ;

const_declaration:
    T_CONST T_STRING const_initialiser
    (VARIABLE-TAG $2 (car $3) (cdr $3) :constant-flag t)
  ;

const_initialiser:
    T_EQUAL T_NULL
    (cons "null" "null")
  | T_EQUAL boolean
    (cons "boolean" $2)
  | T_EQUAL T_CONSTANT_ENCAPSED_STRING
    (cons "string" (substring $2 1 -1))
  | T_EQUAL T_NUMBER
    (cons "number" $2)
  ;

use_type:
    T_CONST
    (identity "variable")
  | T_FUNCTION
    (identity "function")
  | ;; EMPTY
    (identity "class") ;; TODO: or namespace if directory.
  ;

class_declaration: class_opt T_CLASS T_STRING extends_opt implements_opt class_body
                ;;  NAME TYPE MEMBERS PARENTS &rest ATTRIBUTES
                   (TYPE-TAG $3 "class" $6 (if (or $4 $5) (cons $4 $5)) :typemodifiers $1)
                 ;

class_opt: ;; EMPTY
         | T_ABSTRACT
           (list "abstract")
         | T_FINAL
           (list "final")
         ;

extends_opt: ;;EMPTY
           | T_EXTENDS qualified_name
             (identity $2)
           ;

implements_opt: ;;EMPTY
              | T_IMPLEMENTS qualified_name_list
                (nreverse $2)
              ;

class_body: BRACE_BLOCK
            (EXPANDFULL $1 class_member_declaration)
          ;

class_member_declaration:
    LBRACE
    ()
  | RBRACE
    ()
  | block
    ()
  | const_declaration
  | method_declaration
  | attribute_declaration
  ;

attribute_declaration: attribute_opt T_VARIABLE attribute_initialiser
                    ;; NAME TYPE DEFAULT-VALUE &rest ATTRIBUTES
                       (VARIABLE-TAG $2 (car $3) (cdr $3) :typemodifiers $1)
                     ;

attribute_opt:
 ;; EMPTY
    (list "public")
 ;; PHP4 class property
  | T_VAR
    (list "public")
  | static_or_access_modifiers
  ;

attribute_initialiser: ;; EMPTY
                       (cons "mixed" "*empty*")
                     | T_EQUAL T_NULL
                       (cons "null" "null")
                     | T_EQUAL boolean
                       (cons "boolean" $2)
                     | T_EQUAL BRACK_BLOCK
                       (cons "array" $2)
                     | T_EQUAL T_CONSTANT_ENCAPSED_STRING
                       (cons "string" (substring $2 1 -1))
                     | T_EQUAL T_NUMBER
                       (cons "number" $2)
                     ;

class_instantiation: T_NEW qualified_name
                     (identity $2)
                   ;

method_declaration:
    method_opt function_declarator T_COLON method_return_type_hint function_body
    (FUNCTION-TAG (car $2) (TAG $4 'metatype) (cdr $2) :typemodifiers $1)
  | method_opt function_declarator function_body
    (FUNCTION-TAG (car $2) "mixed" (cdr $2) :typemodifiers $1)
                  ;

function_declaration:
    function_declarator T_COLON function_return_type_hint function_body
    (FUNCTION-TAG (car $1) (TAG $3 'metatype) (cdr $1))
  | function_declarator function_body
    (FUNCTION-TAG (car $1) "mixed" (cdr $1))
  ;

function_declarator: T_FUNCTION T_STRING formal_parameter_list
                     (cons $2 $3)
                   ;

;; NOTE Don't use public visibility by default as this creates
;; ambiguity with functions.
method_opt: static_or_access_modifiers
          ;

function_body: T_SEMICOLON
             | block
             ;

formal_parameter_list: PAREN_BLOCK
                       (EXPANDFULL $1 formal_parameters)
                     ;

formal_parameters: LPAREN
                   ()
                 | RPAREN
                   ()
                 | formal_parameter T_COMMA
                 | formal_parameter RPAREN
                 ;

formal_parameter: type_hint T_VARIABLE formal_parameter_initialiser
                  (VARIABLE-TAG $2 (TAG (or $1 (car $3)) 'metatype) (cdr $3))
                ;

formal_parameter_initialiser: ;; EMPTY
                              (cons "mixed" "*empty*")
                            | T_EQUAL T_NULL
                              (cons "null" "null")
                            | T_EQUAL boolean
                              (cons "boolean" $2)
                            | T_EQUAL BRACK_BLOCK
                              (cons "array" $2)
                            | T_EQUAL T_CONSTANT_ENCAPSED_STRING
                              (cons "string" (substring $2 1 -1))
                            | T_EQUAL T_NUMBER
                              (cons "number" $2)
                            ;

access_modifier: T_PUBLIC
               | T_PROTECTED
               | T_PRIVATE
               ;

type_hint:
 ;; EMPTY
  | required_type_hint
  ;

function_return_type_hint:
    required_type_hint
  ;

method_return_type_hint: required_type_hint
                       | T_TYPE_SELF
                       | T_TYPE_PARENT
                       ;

required_type_hint: T_TYPE_ARRAY
                  | T_TYPE_INT
                  | T_TYPE_BOOL
                  | T_TYPE_FLOAT
                  | T_TYPE_STRING
                  | T_TYPE_CALLABLE
                  | qualified_name
                  ;

block: BRACE_BLOCK
     ;

boolean: T_TRUE
       | T_FALSE
       ;

;; type_constant: qualified_name T_SCOPE_RES T_STRING
;;                (concat $1 $2 $3)
;;              ;

;; dims: dims BRACK_BLOCK
;;       (concat $1 "[]")
;;     | BRACK_BLOCK
;;       (identity "[]")
;;     ;

;; dims_opt: ;;EMPTY
;;           (identity "")
;;         | dims
;;         ;

qualified_name: T_NS_SEPARATOR partial_qualified_name
                (concat "\\" $2)
              | partial_qualified_name
                (identity $1)
              ;

partial_qualified_name: partial_qualified_name T_NS_SEPARATOR T_STRING
                        (concat $1 "\\" $3)
                      | T_STRING
                        (identity $1)
                      ;

qualified_name_list: qualified_name_list T_COMMA qualified_name
                     (cons $3 $1)
                   | qualified_name
                     (list $1)
                   ;

static_or_access_modifiers:
    T_STATIC access_modifier
    (list $1 $2)
  | access_modifier T_STATIC
    (list $2 $1)
  | access_modifier
    (list $1)
  ;

;; Temporary interface support I need for testing inline completion of
;; type members.
interface_declaration:
    T_INTERFACE T_STRING extends_opt implements_opt interface_body
    (TYPE-TAG $2 "interface" $5 (if (or $3 $4) (cons $3 $4)))
  ;

interface_body:
    BRACE_BLOCK
    (EXPANDFULL $1 interface_member_declaration)
  ;

interface_member_declaration:
    LBRACE
    ()
  | RBRACE
    ()
  | block
    ()
  | interface_method_declaration
  ;

interface_method_declaration:
  | method_opt function_declarator T_COLON function_return_type_hint T_SEMICOLON
    (FUNCTION-TAG (car $2) (TAG $4 'metatype) (cdr $2) :typemodifiers $1)
  | method_opt function_declarator T_SEMICOLON
    (FUNCTION-TAG (car $2) "mixed" (cdr $2) :typemodifiers $1)
  ;

%%

(define-lex-regex-analyzer grammar-lex-open-tag
  "Detects and converts a php opening tag to a T_OPEN_TAG token"
  "<[?]\\(php\\)?\\([[:space:]]+\\|$\\)"
  (let ((start (match-beginning 0))
        (end   (match-end 0)))
    (semantic-lex-push-token
     (semantic-lex-token 'T_OPEN_TAG start end))))

(define-lex-regex-analyzer grammar-lex-close-tag
  "Detects and converts a php closing tag to a T_CLOSE_TAG token"
  "[?]>"
  (let ((start (match-beginning 0))
        (end   (match-end 0)))
    (semantic-lex-push-token
     (semantic-lex-token 'T_CLOSE_TAG start end))))

(define-lex-analyzer grammar-lex-ns-block
  "Detects namespace blocks enclosed with non-braced namespace
declarations."
  (looking-at "namespace\\s-+\\(\\(\\\\?\\w+\\)+\\)\\s-*;")

  (semantic-lex-push-token
   (semantic-lex-token
    'T_NAMESPACE
    (match-beginning 0)
    (+ (match-beginning 0) (length "namespace"))))

  (semantic-lex-push-token
   (semantic-lex-token
    'T_STRING
    (match-beginning 1)
    (match-end 1)))

  ;; Move the point forward to avoid infinite parsing loops.
  (search-forward ";")

  (semantic-lex-push-token
   (semantic-lex-token
    'S_NS_SCOPE
    (match-end 0)
    (save-excursion
      (semantic-lex-unterminated-syntax-protection 'S_NS_SCOPE
        (re-search-forward "namespace\\s-+\\(\\\\?\\w+\\)+\\s-*;\\|\\'")
        (setq semantic-lex-end-point (point))
        (match-beginning 0)))))
  nil)

(define-lex grammar-lexer
  "Lexical analyzer that handles PHP buffers.
It ignores whitespaces, newlines and comments."
  grammar-lex-open-tag
  grammar-lex-close-tag
  semantic-lex-ignore-newline
  semantic-lex-ignore-whitespace
  semantic-lex-ignore-comments
  grammar--<variable>-regexp-analyzer
  grammar--<punctuation>-string-analyzer
  grammar-lex-ns-block
  grammar--<keyword>-keyword-analyzer
  grammar--<block>-block-analyzer
  grammar--<number>-regexp-analyzer
  grammar--<string>-sexp-analyzer
  grammar--<quoted-string>-sexp-analyzer
  grammar--<mb>-regexp-analyzer)

(defun semantic-php--resolve-symbol-for-tag (symbol &optional ns-scope)
  "Fully qualifies a symbol name tag based on namespace and import rules."
  (unless (or (null ns-scope) (equal ns-scope "\\"))
    (setq ns-scope (concat "\\" ns-scope "\\")))
  ;; (message "Parser qualifying symbol in NS %s: %s => %s" ns-scope symbol (concat ns-scope symbol))
  (concat ns-scope symbol))
